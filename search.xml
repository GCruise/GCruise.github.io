<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>高性能Mysql读书笔记---第四章、Schema与数据类型优化</title>
      <link href="/2019/01/31/high-performance-mysql-chapter1/"/>
      <url>/2019/01/31/high-performance-mysql-chapter1/</url>
      <content type="html"><![CDATA[<p>本章主要讲解如何优化Mysql中数据存储的数据类型</p><h3 id="4-1-选择优化的数据类型"><a href="#4-1-选择优化的数据类型" class="headerlink" title="4.1 选择优化的数据类型"></a>4.1 选择优化的数据类型</h3><p>在选择Mysql数据类型时，选择正确的数据类型很重要，一般在选择数据类型时会遵循几个原则，分别是更小的通常更好，简单就好，尽量避免NULL，分别解释一下几个原则的意思。<br><strong>更小的通常更好</strong><br>选择可以正确存储数据的最小数据类型。更小的数据类型占用更少的磁盘、内存和CPU缓存，并且处理时需要的CPU周期也更少。<br><strong>简单就好</strong><br>简单的数据类型的操作需要更少的CPU周期。如整型比字符操作代价更低。如，应该用整型存储IP地址<br><strong>尽量避免NULL</strong><br>通常情况下最好指定列为NOT NULL，除非真的需要存储NULL值。可为NULL的列使得索引、索引统计和值比较都更复杂，可为NULL的列会使用更多的存储空间。当可为NULL的列被索引时，每个索引记录需要一个额外的资源。</p><h4 id="4-1-1-整数类型"><a href="#4-1-1-整数类型" class="headerlink" title="4.1.1 整数类型"></a>4.1.1 整数类型</h4><p>TINYINT,SMALLINT,MEDIUMINT,INT,BIGINT分别使用8,16,24,32,64位存储空间，存储的范围是-2^(N-1)到2^(N-1)-1。UNSIGNED属性可以规定只为正数，使正数上限提高一倍。</p><h4 id="4-1-2-实数类型"><a href="#4-1-2-实数类型" class="headerlink" title="4.1.2 实数类型"></a>4.1.2 实数类型</h4><p>实数是带有小数部分的整数。DECIMAL存储精确的小数，FLOAT和DOUBLE支持标准的浮点运算进行近似计算。FLOAT和DECIMAL可以指定精度。</p><h4 id="4-1-3-字符串类型"><a href="#4-1-3-字符串类型" class="headerlink" title="4.1.3 字符串类型"></a>4.1.3 字符串类型</h4><p><strong>VARCHAR</strong><br>VARCHAR用于存储可变长字符串。比定长类型更节省空间，仅适用必要的空间。但如果MYSQL表使用ROW_FORMAT=FIXED，每行都会使用定长空间。VARCHAR使用1或2个额外的字节记录字符串的长度。<br><strong>CHAR</strong><br>CHAR是定长的，MYSQL会根据定义的字符串长度分配足够的空间。当存储CHAR时，MYSQL会删除所有的末尾空格。CHAR适合存储MD5值，适合存储经常变更的数据，适合存储非常短的列。<br><strong>BLOB和TEXT</strong><br>BLOB和TEXT存储很大的数据而设计的字符串数据类型，分别采用二进制和字符方式存储<br><strong>使用枚举(ENUM)代替字符串类型</strong><br>枚举可以把不重复的字符串存储为一个预定义集合。MYSQl在内部会将每个值在列表中的位置保存为整数，并在表的.frm文件中保存“数据–字符串”映射关系的“查找表”</p><h4 id="4-1-4-日期和时间类型"><a href="#4-1-4-日期和时间类型" class="headerlink" title="4.1.4   日期和时间类型"></a>4.1.4   日期和时间类型</h4><p><strong>DATETIME</strong><br>范围从1001到9999年，精度为秒。把日期和时间封装到YYYYMMDDHHMMSS的整数中，与时区无关，使用8个字节存储空间。<br><strong>TIMESTAMP</strong><br>保存从1970年1月1日以来的秒数，使用4个字节的存储空间，存储范围小。除了特殊行为以外，应该尽量使用TIMESTAMP，比DATETIME空间效率更高</p><h4 id="4-1-5-位数据类型"><a href="#4-1-5-位数据类型" class="headerlink" title="4.1.5 位数据类型"></a>4.1.5 位数据类型</h4><p><strong>BIT</strong><br>BIT在一列中可以存储多个true/false值，BIT列最大长度64位。MYSQL把BIT当做字符串类型，而不是数字类型。<br><strong>SET</strong><br>SET可以保存很多的true/false值</p><h4 id="4-1-6-选择标识符"><a href="#4-1-6-选择标识符" class="headerlink" title="4.1.6 选择标识符"></a>4.1.6 选择标识符</h4><p><strong>整数类型</strong><br>整数是标识列最好的选择。同时应尽量避免使用字符串类型作为标识列，以为他们消耗空间，并且通常比数字类型慢</p><h3 id="4-2-Mysql-schema-设计中的缺陷"><a href="#4-2-Mysql-schema-设计中的缺陷" class="headerlink" title="4.2 Mysql schema 设计中的缺陷"></a>4.2 Mysql schema 设计中的缺陷</h3><p><strong>太多的列</strong><br>MYSQL的存储引擎API工作时需要在服务器层和存储引擎层之间通过行缓冲格式拷贝数据，然后在服务器层将缓冲内容解码成各个列。从行缓冲中将编码过的列转换成行数据结构的操作代价非常高。<br><strong>太多的关联</strong><br>单个查询最好在12个表内做关联。<br><strong>全能的枚举</strong><br>防止过度使用枚举<br><strong>变相的枚举</strong><br>SET与ENUM可能存在混乱</p><h3 id="4-3-范式和反范式"><a href="#4-3-范式和反范式" class="headerlink" title="4.3 范式和反范式"></a>4.3 范式和反范式</h3>]]></content>
      
      <categories>
          
          <category> Mysql读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>打造高性能Mysql---数据库影响因素</title>
      <link href="/2019/01/31/mysql--chapter1/"/>
      <url>/2019/01/31/mysql--chapter1/</url>
      <content type="html"><![CDATA[<p>本章主要简单介绍一下影响Mysql性能的几大因素</p><h3 id="1、影响数据库的因素"><a href="#1、影响数据库的因素" class="headerlink" title="1、影响数据库的因素"></a>1、影响数据库的因素</h3><p>1、Sql查询速度<br>2、网卡流量<br>3、服务器硬件<br>4、磁盘IO</p><h4 id="影响Mysql性能的几个点："><a href="#影响Mysql性能的几个点：" class="headerlink" title="影响Mysql性能的几个点："></a>影响Mysql性能的几个点：</h4><p>1、效率低下的SQL  导致QPS和TPS变低<br>2、大量的并发：数据库连接数被占满<br>     超高的CPU使用率：因CPU资源耗尽而宕机<br>3、磁盘IO性能突然下降<br>4、网卡IO被占满 （如何避免：减少从服务器数量，进行分级缓存，避免使用“select * ”进行查询）</p><h4 id="大表带来的问题："><a href="#大表带来的问题：" class="headerlink" title="大表带来的问题："></a>大表带来的问题：</h4><p>1、对查询的影响<br>2、对DDL操作影响<br>对数据库历史大表的处理：1、分表分库 2、历史数据归档</p><h4 id="大事务带来的影响"><a href="#大事务带来的影响" class="headerlink" title="大事务带来的影响"></a>大事务带来的影响</h4><p>什么是事务？<br>1、事务是数据库系统区别于其他一切文件系统的重要特性之一<br>2、事务是一组具有原子性的SQL语句，或是一个独立的工作单元<br>符合 原子性、一致性、隔离性、持久性<br>原子性：<br>一个事务必须被视为一个不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败，对于一个事务来说，不可能只执行其中的一部分操作<br>一致性：<br>一致性是指事务将数据库的一种一致性状态转换到另外一种一致性状态，在事务开始之前和事务结束后数据库中数据的完整性没有被破坏<br>隔离性：<br>隔离性要求一个事务对数据库中的数据库修改，在未提交完成前对于其他事务是不可见的<br>  SQL标准中定义了四种隔离级别<br>     未提交读（READ UNCOMMITED）  已提交读（READ COMMITED） 可重复读（REPEATABLE READ） 可串行化（SERIALIZABLE）<br>持久性：<br>一旦事务提交，则其所做的修改就会保存在数据库中</p><p>什么是大事务？<br>运行时间长，操作的数据比较多的事务<br>风险：锁定太多数据，造成大量的阻塞和锁超时<br>           回滚所需时间长<br>           执行时间长，容易造成主从延迟<br>如何处理大事务？<br>1、避免一次处理太多的数据<br>2、移除不必要在事务中的SELECT操作</p>]]></content>
      
      <categories>
          
          <category> Mysql进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>通过Jhipster创建一个应用</title>
      <link href="/2018/12/31/chapter2-Jhipster/"/>
      <url>/2018/12/31/chapter2-Jhipster/</url>
      <content type="html"><![CDATA[<p><strong>Jhipster</strong>是一个自动化创建应用的框架。通过简单的命令即可创建一个应用。<br>首先新建一个文件夹，如application，然后再此文件夹执行jhipster命令。此时会出现一系列问题。出现的问题如下，可根据你的应用使用的技术具体定制。</p><h4 id="生成应用的问题"><a href="#生成应用的问题" class="headerlink" title="生成应用的问题"></a>生成应用的问题</h4><p><strong>Q1、Which type of application would you like to create?(你想创建哪种类型的程序？)</strong></p><ul><li>Monolithic application (recommended for simple projects)（整体应用）</li><li>Microservice application(微服务service)</li><li>Microservice gateway(微服务忘光)</li><li>Jhipster UAA server (for microservice Oauth2 authentication)(基于OAuth的安全认证服务)</li></ul><p><strong>Q2、What is the base name of your application?（服务的名字）</strong><br><strong>Q3、As you are running in a microservice architecture, on which port would like server to run ? It should be unique to avoid port conflicts.（运行程序的端口）</strong><br><strong>Q4、What is your default Java package name?</strong><br><strong>Q5、Which service discovery server do you want to use?(使用哪种注册中心)</strong></p><ul><li>Jhipster Registry(uses Eureka, provides Spring Cloud Config support and monitoring dashboards)</li><li>Consul</li><li>No Service discovery</li></ul><p><strong>Q6、Which type of authentication would you like to use?（使用哪种认证方式）</strong></p><ul><li>JWT authentication (stateless, with a token)</li><li>Oauth 2.0/OIDC Authentication (stateful, works with Keyloak and Okta)</li><li>Authentication with Jhipster UAA server (the server must be generated separately)</li></ul><p><strong>Q7、Which type of databases would you like to use?</strong></p><ul><li>SQL(H2, Mysql, MariaDB, PostgreSQL, Oracle, MSSQL)</li><li>MongoDB</li><li>Couchbase</li></ul><p><strong>Q8、Do you want to use the Spring cache abstraction?(是否使用Spring Cache)</strong></p><ul><li>Yes, with the Ehcache implement (local cache ,for a single node)</li><li>Yes, with the Hazelcast implementation (distributed cache, for multiple nodes)</li><li>[BETA] Yes, with the Infinispan implementation (hybrid cache, for mutiple nodes)</li><li>Yes, with Memcached (distributed cache) - warning when using an SQL databases, this will disable the Hibernate 2nd level cache!</li><li>No - Warning, when using an SQL databases, this will disable the Hibernate 2nd level cache!</li></ul><p><strong>Q9、Would you like to ues Maven or Gradle for building the backend?</strong></p><ul><li>Maven</li><li>Gradle</li></ul><p><strong>Q10、Which other technologies would you like to use?</strong></p><ul><li>Search engine using Elasticsearch</li><li>Asynchronous messages using Apache Kafka</li><li>API first development using OpenAPI-genetator</li></ul><p><strong>Q11、Would you like to enable internationalization support?</strong><br><strong>Q12、Please choose the native language of the application?</strong><br><strong>Q13、Please choose additional languages to install?</strong><br><strong>Q14、Besides Junit and Jest, which testing frameworks would you like to use?</strong><br>回答了以上问题，即可根据自己的需求生成一个application。</p><h4 id="Jhipster命令行选项"><a href="#Jhipster命令行选项" class="headerlink" title="Jhipster命令行选项"></a>Jhipster命令行选项</h4><ul><li>–help </li><li>–skip-cache     #忘记记住的答案</li><li>–skip-install    #不自动安装依赖</li><li>–from-cli         #表明是Jhipster CLI命令</li><li>–skip-client     #跳过客户端生成，只生成后台服务。可使用Jhipster server替代</li><li>–skip-server    #跳过服务端生成，只生成客户端服务。可使用Jhipster clint替代</li><li>–skip-git         #不自动生成git项目</li><li>–skip-commit-hook  #不增加husky功能</li><li>–skip-user-management #跳过生成用户管理，包括前端后后端</li><li>–skip-check-length-of-identifier #跳过检验identifier的长度，目前oracle只支持30字符</li><li>–with-entities #如果已经生成了实体则再生成一次</li><li>–skip-checks #检查需要工具的状态</li><li>–jhi-prefix #添加服务、组件或路由的前缀，默认jhi</li><li>–yarn #使用yarn取代npm</li><li>–auth #当跳过服务端代码生成指定认证类型</li><li>–db #当跳过服务端代码生成时指定数据库</li><li>–uaa-base-name #当使用uaa认证和跳过服务端代码生成时指定UAA服务</li><li>–build #当跳过服务端代码生成时指定构建工具</li><li>–websocket #当跳过服务端代码生成时指定websocket选项</li><li>–search-engine #当跳过服务端代码生成时指定搜索引擎</li><li>–blueprint #</li><li>–experimental #使用实验特性</li></ul><h4 id="创建实体"><a href="#创建实体" class="headerlink" title="创建实体"></a>创建实体</h4><p>Jhipster官方提供了几种方式创建实体。这里建议采用<strong>JDL Stdio</strong>的方式，使用指定的JDL语言创建实体和关系。JDL Stdio官网 <a href="https://start.jhipster.tech/jdl-studio/" target="_blank" rel="noopener">https://start.jhipster.tech/jdl-studio/</a> 通过此网站可生成实体及实体的对应关系，完成后得到.jh文件。此时便可使用import-jdl子生成器从.jh文件生成实体 jhipster import-jdl yourjdl.jh .<br><strong>JDL支持的字段类型</strong><br>不同的数据库所支持的字段类型有所不同，对应如下：<br>common databases:<br>PostgreSQL、MySQL、MariaDB、Oracle、MsSQL、MongoDB、Couchbase<br>common databases</p><ul><li>String</li><li>Integer</li><li>Long</li><li>BigDecimal</li><li>Float</li><li>Double</li><li>Enum</li><li>Boolean</li><li>LocalDate</li><li>Date</li><li>ZonedDateTime</li><li>UUID</li><li>Blob</li><li>AnyBlob</li><li>ImageBlob</li><li>TextBlob</li><li>Instant</li></ul>]]></content>
      
      <categories>
          
          <category> Jhipster </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring boot </tag>
            
            <tag> angular </tag>
            
            <tag> Jhipster </tag>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>再次入坑Jhipster---初始Jhipster</title>
      <link href="/2018/12/23/chapter1--Jhipster/"/>
      <url>/2018/12/23/chapter1--Jhipster/</url>
      <content type="html"><![CDATA[<p>如果英文水平好的话，请忽略这篇文章，直接生撸Jhipster官网网站<a href="https://www.jhipster.tech/" target="_blank" rel="noopener">https://www.jhipster.tech/</a> ，官网上对Jhipster的介绍比较全面，基本上涵盖了Jhipster的基本介绍和使用的基本方法，如果想了解更多东西的话，还是建议去基佬网站吧<a href="https://github.com/jhipster/generator-jhipster" target="_blank" rel="noopener">https://github.com/jhipster/generator-jhipster</a> ，还可以和开发好好交流。废话不多说，接下来开始正式介绍Jhipster。</p><h3 id="1、Jhipster简介"><a href="#1、Jhipster简介" class="headerlink" title="1、Jhipster简介"></a>1、Jhipster简介</h3><p>Jhipster是一个用于生成，开发和部署应用程序和Spring微服务的开发平台，采用Spring Boot+Angular/React的方式，Jhipster旨在通过Spring boot在服务端打造一个高性能、强大的Java系统，通过Angular、React和Bootstrap打造一个有序的、时髦的、移动优先的前端，通过 Jhipster Registry、Netflix OSS、ELK stack和Docker打造一个强大的微服务架构，通过Yeoman、Webpack和Maven/Gradle打造一个实用的工作流去构建你的程序。</p><h3 id="2、可选择的组件"><a href="#2、可选择的组件" class="headerlink" title="2、可选择的组件"></a>2、可选择的组件</h3><h4 id="2-1、前端"><a href="#2-1、前端" class="headerlink" title="2.1、前端"></a>2.1、前端</h4><p>前端主要使用Angular/React框架，Jhipster主要支持以下框架：<br><img src="/img/chapter1--Jhipster1.png" alt="前端框架"></p><h4 id="2-2、后台"><a href="#2-2、后台" class="headerlink" title="2.2、后台"></a>2.2、后台</h4><p>后台采用Spring boot框架，<br><img src="/img/chapter1--Jhipster2.png" alt="后台框架"></p><p>Jhipster提供了以上组件供用户选择，用户可以根据自己系统的需要选择相应的组件开发自己的系统。</p><h3 id="3、Jhipster的用法"><a href="#3、Jhipster的用法" class="headerlink" title="3、Jhipster的用法"></a>3、Jhipster的用法</h3><p>Jhipster之所以在国外很受欢迎，主要是因为它为使用者提供了一个快速生成代码的平台，通过简单的命令行操作，可以快速生成一个程序框架。通过JDL可以快速生成实体，并实现实体增删查改接口，使用者只需根据具体的功能区修改代码就好，大大提高了开发的效率。<br>要使用Jhipster生成程序，首先就要准备Jhipster的开发环境，主要包括以下几个东西：jdk8、node.js、yeoman、bower、gulp、Jhipster。安装步骤如下所示：<br>1、安装jdk8<br>2、安装node.js<br>3、通过npm命令安装yeoman、bower、gulp<br>      npm install -g yo bower gulp-li<br>4、通过npm命令安装jhipster<br>      npm install -g generator-jhipster<br>注：npm安装速度可能会比较慢，可自行安装淘宝镜像cnpm<br>基本的环境安装完成以后，就可以通过yo命令来直接生成jhipster程序。</p><hr><p>感谢阅读这篇文章。下章介绍：详细讲解jhipster程序如何生成</p>]]></content>
      
      <categories>
          
          <category> Jhipster </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring boot </tag>
            
            <tag> angular </tag>
            
            <tag> Jhipster </tag>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/08/07/hello-world/"/>
      <url>/2018/08/07/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
    </entry>
    
  
  
</search>
